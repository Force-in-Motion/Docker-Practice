
# Показывает информацию об установленной версии docker
# TODO 'docker version' - Показывает информацию об установленной версии, используемой операционной системе и т.д


# Список запущенных и остановленных контейнеров
# TODO 'docker ps -a' - Показывает список запущенных и остановленных контейнеров и их данные: id, имя, команду, которая запускает процесс в контейнере, дату, когда был запущен процесс и статус (активен или остановлен)


# Список запущенных контейнеров
# TODO 'docker ps' - Показывает список только запущенных контейнеров и их данные: id, имя, команду, которая запускает процесс в контейнере, дату, когда был запущен процесс и статус (активен или остановлен)


# Просмотр локальных образов
# TODO 'docker images' - Показывает список всех образов, которые находятся локально на компьютере


# Базовый запуск контейнера
# TODO 'docker run имя образа' - Создает контейнер из образа, указанного после 'run', например 'docker run hello-world'
#  изначально докер будет искать такой образ локально, если он его не найдет то обратится в docker hub, если такой образ там существует, то он будет скачан и затем из него создастся контейнер.
#  Каждый Образ, как правило имеет теги, каждый тег закрепляется за определенной версией образа, если нам нужно скачать и запустить последнюю версию образа то тег не указывается как в предыдущей команде,
#  если же нужна конкретная версия образа то она указывается после двоеточия, которое ставится после названия образа,
#  например 'docker run hello-world:latest', такая команда установит последнюю версию образа, все теги образа можно найти на docker hub,
#  найдя нужный образ и посмотрев возможные версии и теги для них.
#  Происходит это следующим образом :
#  1. Docker клиент (локальный) подключается к Docker сервису
#  2. Docker сервис скачивает образ с Docker hub
#  3. Docker сервис создает новый контейнер на основании того образа, который был скачан
#  4. После Этого запускается определенный процесс внутри созданного контейнера, который и запускает скрипт, который находится в контейнере
#  Важно понимать, что Docker завершает работу контейнера автоматически, если в нем нет активных процессов,
#  например сервис скачал образ 'docker run hello-world', создал контейнер по этому образу, после этого процесс, находящийся внутри созданного контейнера запустил скрипт,
#  в данном случае это просто текст, который выводится в консоль и так как в контейнере выполнять больше нечего, то процесс завершается и после этого Docker автоматически останавливает этот контейнер.
#  Так же каждый контейнер имеет id, имя, команду, которая запускает процесс в контейнере, дату, когда был запущен процесс и статус (активен или остановлен)


# Удаление контейнера
# TODO 'docker rm id контейнера' - Удаляет контейнер, например 'docker rm f3bdc506a074', так же удалить контейнер можно и указав его имя вместо id


# Остановка контейнера
# TODO 'docker stop имя контейнера или id' - Останавливает работу контейнера, пример: 'docker stop 436bb3a5adb2'


# Удаление остановленных контейнеров
# TODO 'docker container prune' - Удаляет ВСЕ остановленные контейнеры


# Базовый запуск контейнера
# TODO 'docker run nginx' - Запустит контейнер nginx или скачает и запустит если его еще не было на компьютере,
#  при этом мы сразу попадем в оболочку nginx в терминале и увидим логи его работы.


# Базовый запуск контейнера в фоновом режиме
# TODO 'docker run -d nginx' - Запустит контейнер nginx в фоновом режиме, то есть в консоли мы сможем работать и дальне, в оболочку nginx мы не войдем, но nginx будет работать в фоне


# Просмотр данных контейнера
# TODO 'docker container inspect id контейнера' - Позволяет посмотреть данные, которые содержатся в контейнере, среди которых будет IP адрес, пример - 'docker container inspect 436bb3a5adb2'


# Просмотр данных контейнера с фильтром
# TODO 'docker container inspect 436bb3a5adb2 | grep IPAddress' - Позволяет фильтровать содержимое контейнера по какому либо определенному блоку, в данном случае это IPAddress


# Запуск дополнительных процессов
# TODO 'docker exec команда id или имя контейнера процесс ' - Запустит отдельный процесс в уже запущенном контейнере,
#  например: 'docker exec -it 436bb3a5adb2 bash' запустит интерактивную оболочку bash в уже запущенном контейнере nginx,
#  чтобы выйти из процесса bash нужно ввести exit, но это не остановит выполнение контейнера nginx, а только остановит процесс bash


# Изменение имени контейнера
# TODO 'docker run -d --name новое имя контейнера название контейнера' - Команда позволяет присвоить новое имя контейнеру и запускает его в фоновом режиме,
#  пример: 'docker run -d --name server_nginx nginx'


# Mapping портов
# TODO 'docker run -d -p 8080:80 nginx' - Позволяет запустить nginx в фоновом режиме и предоставить доступ к серверу nginx, находящемуся в контейнере,
#  для этого нужно указать команду -p, далее 4 любые цифры порта компьютера (мы сами определяем это название, в данном случае в примере 8080),
#  затем через : указывается порт непосредственно порт nginx, который она предоставляет (это 80, проверить его можно командой 'docker ps' если контейнер nginx находится в отключенных),
#  при попытке подключения через браузер нам необходимо ввести localhost:8080, при этом докер перебросит подключение напрямую на порт nginx.
#  то есть эта запись 8080:80 говорит докеру чтобы при подключению по порту 8080 должно использоваться подключение к nginx, порт которого 80,
#  это называется mapping портов


# Mapping томов
# TODO 'docker run -v ${PWD}:/usr/share/nginx/html' - Используется для замены базового файла html, который nginx отдает всем подключившимся клиентам по его порту (порт nginx 80) и находится он внутри контейнера nginx по адресу /usr/share/nginx/html,
#  при этом конструкция ${PWD} это переменная, показывающая абсолютный путь к текущей локальной папке, так же эту конструкцию можно заменить на путь к этой папке, указанный явно вручную,
#  таким образом до : мы должны указать путь к папке откуда данные должны браться, а после : указываем директорию в контейнере, в которой данные должны замениться на данные из локальной папки, чтобы nginx отдавал их всем подключившимся клиентам,
#  то есть эта команда 'docker run -v ${PWD}:/usr/share/nginx/html' создаст новый контейнер в котором данные, хранящиеся в директории по адресу /usr/share/nginx/html будут заменены данными,
#  хранящимися локально на компьютере по такому пути ${PWD} и все подключившиеся клиенты теперь будут получать эти новые данные